{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDEGffR0M4Rf29pntl9tsiXmBcLlYLF_Yo\",\n  authDomain: \"clone-2c3b0.firebaseapp.com\",\n  projectId: \"clone-2c3b0\",\n  storageBucket: \"clone-2c3b0.appspot.com\",\n  messagingSenderId: \"40580541701\",\n  appId: \"1:40580541701:web:564d3f192e2fe1c5d99b6c\"\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = db.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n}; //Esta funcion se crear para convertir el array que recibimos de firebase a un objecto\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformCollection = collections.docs.map(doc => {\n    const {\n      title,\n      subtitle,\n      advert,\n      imageUrl,\n      linkUrl,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      title,\n      subtitle,\n      advert,\n      imageUrl,\n      linkUrl,\n      items\n    };\n  });\n  return transformCollection.reduce((accumulator, collection) => {\n    accumulator[collection.linkUrl.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const db = firebaseApp.firestore();\nexport const auth = firebase.auth();","map":{"version":3,"sources":["C:/Users/AC/Desktop/ReactProjects/Amazon/amazon-clone-redux/src/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","db","doc","uid","snapShot","get","exists","displayName","email","createAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformCollection","docs","map","title","subtitle","advert","imageUrl","linkUrl","items","data","id","reduce","accumulator","collection","toLowerCase","firestore","auth"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,6BAFS;AAGrBC,EAAAA,SAAS,EAAE,aAHU;AAIrBC,EAAAA,aAAa,EAAE,yBAJM;AAKrBC,EAAAA,iBAAiB,EAAE,aALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB;AASA,MAAMC,WAAW,GAAGR,QAAQ,CAACS,aAAT,CAAuBR,cAAvB,CAApB;AAEA,OAAO,MAAMS,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,EAAE,CAACC,GAAH,CAAQ,SAAQJ,QAAQ,CAACK,GAAI,EAA7B,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,QAAQ,GAAG,IAAIC,IAAJ,EAAjB;;AAEA,QAAI;AACF,YAAMV,OAAO,CAACW,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,QAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACF;;AACD,SAAOf,OAAP;AACD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMgB,+BAA+B,GAAIC,WAAD,IAAiB;AAC9D,QAAMC,mBAAmB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsBlB,GAAD,IAAS;AACxD,UAAM;AAAEmB,MAAAA,KAAF;AAASC,MAAAA,QAAT;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA,QAA3B;AAAqCC,MAAAA,OAArC;AAA8CC,MAAAA;AAA9C,QAAwDxB,GAAG,CAACyB,IAAJ,EAA9D;AAEA,WAAO;AACLC,MAAAA,EAAE,EAAE1B,GAAG,CAAC0B,EADH;AAELP,MAAAA,KAFK;AAGLC,MAAAA,QAHK;AAILC,MAAAA,MAJK;AAKLC,MAAAA,QALK;AAMLC,MAAAA,OANK;AAOLC,MAAAA;AAPK,KAAP;AASD,GAZ2B,CAA5B;AAaA,SAAOR,mBAAmB,CAACW,MAApB,CAA2B,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAC7DD,IAAAA,WAAW,CAACC,UAAU,CAACN,OAAX,CAAmBO,WAAnB,EAAD,CAAX,GAAgDD,UAAhD;AACA,WAAOD,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAlBM;AAoBP,OAAO,MAAM7B,EAAE,GAAGN,WAAW,CAACsC,SAAZ,EAAX;AACP,OAAO,MAAMC,IAAI,GAAG/C,QAAQ,CAAC+C,IAAT,EAAb","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDEGffR0M4Rf29pntl9tsiXmBcLlYLF_Yo\",\r\n  authDomain: \"clone-2c3b0.firebaseapp.com\",\r\n  projectId: \"clone-2c3b0\",\r\n  storageBucket: \"clone-2c3b0.appspot.com\",\r\n  messagingSenderId: \"40580541701\",\r\n  appId: \"1:40580541701:web:564d3f192e2fe1c5d99b6c\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = db.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n//Esta funcion se crear para convertir el array que recibimos de firebase a un objecto\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformCollection = collections.docs.map((doc) => {\r\n    const { title, subtitle, advert, imageUrl, linkUrl, items } = doc.data();\r\n\r\n    return {\r\n      id: doc.id,\r\n      title,\r\n      subtitle,\r\n      advert,\r\n      imageUrl,\r\n      linkUrl,\r\n      items,\r\n    };\r\n  });\r\n  return transformCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.linkUrl.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nexport const db = firebaseApp.firestore();\r\nexport const auth = firebase.auth();\r\n"]},"metadata":{},"sourceType":"module"}